[{"filePath":"/home/fabio/Documents/Cornell/Spring/BSS/milestone-2-Fabio752/backend/src/app.js","messages":[],"suppressedMessages":[{"ruleId":"max-len","severity":2,"message":"This line has a length of 84. Maximum allowed is 80.","line":103,"column":1,"nodeType":"Program","messageId":"max","endLine":103,"endColumn":85,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"max-len","severity":2,"message":"This line has a length of 83. Maximum allowed is 80.","line":120,"column":1,"nodeType":"Program","messageId":"max","endLine":120,"endColumn":84,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"max-len","severity":2,"message":"This line has a length of 83. Maximum allowed is 80.","line":140,"column":1,"nodeType":"Program","messageId":"max","endLine":140,"endColumn":84,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"valid-jsdoc","replacedBy":[]},{"ruleId":"require-jsdoc","replacedBy":[]}]},{"filePath":"/home/fabio/Documents/Cornell/Spring/BSS/milestone-2-Fabio752/backend/src/database.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":4,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":4,"endColumn":48,"fix":{"range":[75,103],"text":"'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":15,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":15,"endColumn":21,"fix":{"range":[489,492],"text":"let"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":70,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":70,"endColumn":3,"fix":{"range":[2051,2053],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":71,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":71,"endColumn":3,"fix":{"range":[2062,2064],"text":"    "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":71,"column":27,"nodeType":"AssignmentPattern","messageId":"missing","endLine":72,"endColumn":1,"fix":{"range":[2087,2090],"text":"),\n)"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":78,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":78,"endColumn":42,"fix":{"range":[2229,2232],"text":"let"}},{"ruleId":"operator-linebreak","severity":2,"message":"'?' should be placed at the end of the line.","line":91,"column":7,"nodeType":"ConditionalExpression","messageId":"operatorAtEnd","endLine":91,"endColumn":8,"fix":{"range":[2550,2559],"text":" ?\n      "}},{"ruleId":"operator-linebreak","severity":2,"message":"':' should be placed at the end of the line.","line":92,"column":7,"nodeType":"ConditionalExpression","messageId":"operatorAtEnd","endLine":92,"endColumn":8,"fix":{"range":[2561,2570],"text":" :\n      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 4.","line":96,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":96,"endColumn":5,"fix":{"range":[2724,2728],"text":"      "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":96,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":97,"endColumn":1,"fix":{"range":[2754,2767],"text":"createdAt,\n  )"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 6.","line":106,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":106,"endColumn":7,"fix":{"range":[2998,3004],"text":"        "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":106,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":107,"endColumn":1,"fix":{"range":[3052,3059],"text":"),\n    )"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 6.","line":122,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":122,"endColumn":7,"fix":{"range":[3436,3442],"text":"        "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":122,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":123,"endColumn":1,"fix":{"range":[3490,3497],"text":"),\n    )"}}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":14,"fixableWarningCount":0,"source":"let database = {};\n\nconst generateSessionCode = () => {\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const randomChars =\n    alphabet[Math.floor(Math.random() * alphabet.length)] +\n    alphabet[Math.floor(Math.random() * alphabet.length)] +\n    alphabet[Math.floor(Math.random() * alphabet.length)];\n\n  const randomNums = Math.random().toString().slice(2, 5);\n  const randomCode = randomChars + randomNums;\n  return randomCode;\n};\nconst checkSessionCodeExists = (sessionCode) => {\n  var found = false;\n  database?.classes?.forEach((c) => {\n    c?.sessionCodes?.forEach((sc) => {\n      if (sc?.id === sessionCode) {\n        found = true;\n      }\n    });\n  });\n  return found;\n};\n\nexport const checkClassExists = (classId) => {\n  const classIdx = database.classes?.findIndex((c) => c?.id === classId);\n  return classIdx >= 0;\n};\n\nexport const checkClassOwnership = (classId, username) => {\n  const classIdx = database.classes?.findIndex((c) => c?.id === classId);\n  return username === database.classes[classIdx]?.owner;\n};\n\nexport const getQuestions = (sessionCode) => {\n  if (!checkSessionCodeExists(sessionCode)) {\n    return null;\n  } else {\n    database.questions = database.questions == null ? [] : database.questions;\n    return database.questions.filter((q) => q?.sessionCode === sessionCode);\n  }\n};\n\nexport const getClasses = (username) => {\n  database.classes = database.classes == null ? [] : database.classes;\n  return database.classes.filter((c) => c?.owner === username);\n};\n\nexport const createQuestionForSession = (sessionCode, question) => {\n  question.sessionCode = sessionCode;\n  question.upvotes = 0;\n  question.createdAt = new Date();\n  question.dismissed = false;\n\n  database.questions = database.questions == null ? [] : database.questions;\n\n  if (!checkSessionCodeExists(sessionCode)) {\n    return null;\n  }\n\n  question.id = database.questions.length;\n  database.questions?.push(question);\n  database.questions?.sort((a, b) => b.createdAt - a.createdAt);\n\n  return question;\n};\n\nexport const createSessionCodeForClass = (\n  classId,\n  rawDateTime = new Date()\n) => {\n  if (!checkClassExists(classId)) {\n    return null;\n  }\n\n  const classIdx = database.classes.findIndex((c) => c?.id === classId);\n  var randomCode = generateSessionCode();\n\n  while (checkSessionCodeExists(randomCode)) {\n    randomCode = generateSessionCode();\n  }\n\n  const sessionCodeObj = {\n    id: randomCode,\n    createdAt: Date.parse(rawDateTime),\n  };\n\n  database.classes[classIdx].sessionCodes =\n    database.classes[classIdx].sessionCodes == null\n      ? []\n      : database.classes[classIdx].sessionCodes;\n\n  database.classes[classIdx].sessionCodes.push(sessionCodeObj);\n  database.classes[classIdx].sessionCodes.sort(\n    (a, b) => b.createdAt - a.createdAt\n  );\n  return sessionCodeObj;\n};\n\nexport const upvoteQuestionForSession = (sessionCode, questionId) => {\n  if (!checkSessionCodeExists(sessionCode)) {\n    return null;\n  } else {\n    const questionIdx = database.questions?.findIndex(\n      (q) => q?.id.toString() === questionId.toString()\n    );\n    if (questionIdx === -1) {\n      return null;\n    } else {\n      database.questions[questionIdx].upvotes += 1;\n      return database.questions[questionIdx];\n    }\n  }\n};\n\nexport const dismissQuestionForSession = (sessionCode, questionId) => {\n  if (!checkSessionCodeExists(sessionCode)) {\n    return null;\n  } else {\n    const questionIdx = database.questions?.findIndex(\n      (q) => q?.id.toString() === questionId.toString()\n    );\n    if (questionIdx === -1) {\n      return null;\n    } else {\n      database.questions[questionIdx].dismissed =\n        !database.questions[questionIdx].dismissed;\n      return database.questions[questionIdx];\n    }\n  }\n};\n\nexport const createClass = (classData) => {\n  database.classes = database.classes == null ? [] : database.classes;\n  database.classes.push(classData);\n  return classData;\n};\n\nexport const clear = () => {\n  database = {};\n};\n","usedDeprecatedRules":[{"ruleId":"valid-jsdoc","replacedBy":[]},{"ruleId":"require-jsdoc","replacedBy":[]}]}]